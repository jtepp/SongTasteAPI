const saving = new URLSearchParams(window.location.search).get('save') == 'true'
const redirect = `https://songtaste.netlify.app/app?save=true`;
const clientID = `4dcd7399f4954e2c8c679f38d1bb1419`
const creds = "NGRjZDczOTlmNDk1NGUyYzhjNjc5ZjM4ZDFiYjE0MTk6ZWNmOWExODVjYzZjNDI4NmJkMjA3NTNhMThmZTVmYzU=";
var code;
var targets = JSON.parse(window.localStorage.getItem('targ')) || {
    acousticness: [],
    danceability: [],
    duration_ms: [],
    energy: [],
    instrumentalness: [],
    liveness: [],
    speechiness: [],
    tempo: [],
    valence: []
}
for (k in targets) {
    targets[k] = targets[k].filter(e => e != null && e != undefined && e != 'null' && e != 'undefined' && e != '')
}
var plready = true
var unauthorized;
var pulsetimes = 0;
var err;
const SLrandomness = 10
var alreadyMadePlaylist = false;
const playlistJSON = {
    "name": 'SongTaste Favorites',
    "public": true,
    "collaborative": false,
    "description": "A professionally curated playlist by SongTaste, and its neural network."
}
var spinner = { 0: 0, 1: 0, 2: 0 }
const imgData = {
    data: ``
}
var tokenObj = {}
var userObj = {}
var plObj = {}
var plID = ''
var goodURI = []
var bestURI = []
var failed = false;
var searchClickCount = 0;
var wordLength = 3;
var currentID = '';
var barLength = 0;
var loadingPL = false;
var listplay = []
var key = "";
var inp = {};
const threshold = 0.5//0.55
var message = '';
var likelist = []
var hatelist = []
var train = []
var run = []
var reactready = true
var mName = '';
var mArtist = '';
var apiData = {}
const v = document.getElementById('dataview');
const playlist = document.getElementById('playlist-view')
const searchID = document.getElementById('searchID');
const automate = document.getElementById('automate');
var allSongs = {
    "returnnet": true,
    "transfernet": {},
    "transfertrainer": {},
    "IDList": [],
    "Atrain": [],
    "break": "break",
    "Crun": []
}
console.log(window.localStorage.getItem('all'))
try { console.log(JSON.parse(window.localStorage.getItem('all'))) } catch (e) { console.log(e) }
try { allSongs = JSON.parse(window.localStorage.getItem('all')) } catch (e) {
    console.log(e)
    if (allSongs == null || JSON.parse(window.localStorage.getItem('all')) == null) allSongs = {
        "returnnet": true,
        "transfernet": {},
        "transfertrainer": {},
        "IDList": [],
        "Atrain": [],
        "break": "break",
        "Crun": []
    }
}
console.log(allSongs);
if (window.location.href.includes('/app') && allSongs != null) {
    for (let i = 0; i < allSongs.IDList.length; i++) {
        reactingList(allSongs.IDList[i], allSongs.Atrain[i].output == 1 ? true : false)
    }
} else {
    allSongs = {
        "returnnet": true,
        "transfernet": {},
        "transfertrainer": {},
        "IDList": [],
        "Atrain": [],
        "break": "break",
        "Crun": []
    }
}
var needMore = 4 - allSongs.IDList.length;
var needplaylist = 11 - likelist.length;
const responses = {
    true: [
        "You might like this one...",
        "Give this one a listen!",
        "I would recommend this one"
    ],
    false: [
        "Not so sure about this one...",
        "I'd skip this one if I were you",
        "You might not like this one"
    ]

}
var responding = false;
var homePreview = []
var mainBox = {}
const resClasses = ['header', 'footer', 'home-song-bar', 'formstuff', 'button', 'box', 'guess-box', 'lame-image', 'home-song-box', 'nav-top', 'playlist-iframe', 'message', 'home-song-info', 'song-image', 'iframe', 'flexbutton']
const banner = document.getElementById('banner')
const spacer = document.getElementById("spacer")
document.body.onresize = () => {
    // console.log(screen.width)
    resClasses.forEach(c => {
        responsive(c, 'FR-' + c)
    })
}
document.body.onload = document.body.onresize
document.body.onresize()
document.body.onresize()
document.body.onresize()
document.body.onresize()
document.body.onresize()
document.body.onresize()

if (window.location.href.includes('index.html') || window.location.pathname == '/') { //HOMEPAGE STARTUP
    asyncHome();
}
else if (window.location.href.includes('/app')) {


    // if (needPlaylist < 1 && Math.abs(likelist.length - hatelist.length) > 2) { automate.style.background = 'RGB(148,148,148)' }
    // else automate.style.background = 'RGB(207,0,0)'


    document.getElementById('longth').value = window.localStorage.getItem('length') || '5'
    document.getElementById('show').innerHTML = '[' + (window.localStorage.getItem('length') || 5) + ']'

    updateTEXT()

    code = new URLSearchParams(window.location.search).get('code')
    err = new URLSearchParams(window.location.search).get('error') == null

    // unauthorized = new URLSearchParams(window.location.search).get('code') == null && new URLSearchParams(window.location.search).get('err') == null

    document.getElementById('options').onmouseout()


    searchID.addEventListener('click', () => {
        if (searchClickCount == 0) { searchClickCount++; searchID.innerHTML = '' }
    })
    document.getElementById('clear').addEventListener('click', () => {
        document.getElementById('guessID').style.background = 'RGB(146, 146, 146);'
        console.log("CLEARED")
        allSongs.IDList.forEach(e => { removeFromView(e) })
        allSongs = {
            "returnnet": true,
            "transfernet": {},
            "transfertrainer": {},
            "IDList": [],
            "Atrain": [],
            "break": "break",
            "Crun": []
        }
        targets = {
            acousticness: [],
            danceability: [],
            duration_ms: [],
            energy: [],
            instrumentalness: [],
            liveness: [],
            speechiness: [],
            tempo: [],
            valence: []
        }
        window.localStorage.setItem('all', JSON.stringify(allSongs))
        window.localStorage.setItem('targ', JSON.stringify(targets))
        needMore = 4;
        needPlaylist = 11
        updateTEXT();

    })
    searchID.addEventListener('keypress', (e) => {
        if (e.keyCode == 13) {
            e.preventDefault()
            searchSpecific(searchID.innerHTML)
            searchID.innerHTML = ''
        }
    })
    try { document.getElementById('optimize').checked = JSON.parse(window.localStorage.getItem('check')) } catch (e) { console.log(e) }
    document.getElementById('optimize').addEventListener('click', () => {
        window.localStorage.setItem('check', document.getElementById('optimize').checked)
        allSongs.returnnet = document.getElementById('optimize').checked
        console.log(allSongs.returnnet)
    })

    automate.addEventListener('click', () => {
        if (needPlaylist < 1 && plready) {// && !saving) {
            // if (Math.abs(likelist.length - hatelist.length) <= 2) {

            window.sessionStorage.setItem('id', currentID)
            window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=code&redirect_uri=${encodeURIComponent(redirect)}&scope=playlist-modify-private%20playlist-modify-public%20ugc-image-upload&show_dialog=false`

            // }
            // else {
            //     toggleDataview()
            //     pulsetimes++
            //     $.keyframe.define({
            //         name: `pulse${pulsetimes}`,
            //         "0%": {
            //             'font-size': '10pt'
            //         },
            //         "50%": {
            //             'font-size': '15pt'
            //         },
            //         "100%": {
            //             'font-size': "10pt"
            //         }
            //     })
            //     document.getElementById('hint').style.animation = `pulse${pulsetimes} 0.4s linear 4`

            // }



        }
    })





    document.getElementById('input-file')
        .addEventListener('change', getFile)
    document.getElementById('input-file')
        .addEventListener('change', () => {
            // enable(true);
            v.innerHTML = ` <center>
            <div id="currentheader" class="tap">Your info<br>
                <b class="tap">(Try maintain an equal Liked:Disliked ratio!)</b>
            </div>
        </center>
        <div id="currentflex" class="tap">
            <div id="badlist" class="dataviewlist tap">

                <h1 class="tap" id="dislikedh1">Disliked
                </h1>




            </div>
            <div id="goodlist" class="dataviewlist tap">
                <h1 class="tap" id="likedh1">Liked
                </h1>
            </div>

        </div>
        <center>
            <div class="button tap" id="clear">Clear data<div>
        </center>`;

        })
    document.getElementById('viewdatabutton').addEventListener('mouseup', () => {
        toggleDataview()
    })

    document.addEventListener('mousedown', (event) => {
        // if (v.getAttribute('style') == 'top: 50px' && !event.path.includes(v) && !event.path.includes(document.getElementById('viewdatabutton'))) {
        //     v.setAttribute('style', 'top: 3000px')
        // }
        let clicc = false;
        let ass = event.target.getAttribute('class');
        try { clicc = event.target.getAttribute('class').includes('tap') } catch (e) { clicc = false; }

        if (v.getAttribute('style') == 'top: 50px' && !clicc) {
            v.setAttribute('style', 'top: 3000px')
            v.style.animation = "none"
        }
    })
    document.addEventListener('touchstart', (event) => {
        let tapp = false;
        try { tapp = event.touches[0].target.getAttribute('class').includes('tap') } catch (e) { tapp = false; }
        if (v.getAttribute('style') == 'top: 50px' && !tapp) {
            v.setAttribute('style', 'top: 3000px')
        }
    })
    document.getElementById('enable').addEventListener('click', () => {

        enable();

    })


    asyncApp()

}





async function asyncHome() {
    await retrieveSong(randomWord(wordLength), 0, '0');
    await retrieveSong(randomWord(wordLength), 1, '1');
    await retrieveSong(randomWord(wordLength), 2, '2');
}

async function updateTEXT() {
    needMore = 4 - allSongs.IDList.length;
    needPlaylist = 11 - allSongs.IDList.length;
    automate.innerHTML = "Automate a playlist";
    if (needPlaylist >= 1) {
        automate.innerHTML = (needPlaylist + 1) + " more...";
    }
    if (needMore >= 1) {
        document.getElementById('guessTEXT').innerHTML = (needMore + 1) + " more...";
    }
    else {
        allSongs.Crun = [
            mainBox.acousticness,
            mainBox.danceability,
            mainBox.duration_ms,
            mainBox.energy,
            mainBox.instrumentalness,
            mainBox.liveness,
            mainBox.speechiness,
            mainBox.tempo,
            mainBox.valence
        ];
        await APIcall();
        let curArray;
        const liker = apiData.returnedGuess >= threshold;
        if (liker)
            curArray = responses.true;
        else
            curArray = responses.false;
        if (liker)
            document.getElementById('guessID').style.backgroundColor = "RGB(0,230,0)";
        else
            document.getElementById('guessID').style.backgroundColor = "RGB(230,0,0)";
        // console.log(liker)
        do { message = curArray[Math.floor(Math.random() * curArray.length)]; } while (message == document.getElementById('guessTEXT').innerHTML);
        console.log(message);
        document.getElementById('guessTEXT').innerHTML = message;
    }
}

async function asyncApp() {
    await getToken()
    // const initial = new URLSearchParams(window.location.search).get('s')
    const initial = window.sessionStorage.getItem('id') || new URLSearchParams(window.location.search).get('s')
    if (initial == 'random' || initial == null || new URLSearchParams(window.location.search).get('s') == 'random') {
        await searchNew(randomWord(3))
    } else currentID = initial
    embed('box-iframe', currentID)
    await retrieveFeatures(currentID, mainBox)
    resClasses.forEach(c => {
        responsive(c, 'FR-' + c)
    })
    if (saving) {
        listplay = []
        // playlist.innerHTML = '';
        // document.getElementById('playlistcontainer').style.height = '100vh'
        playlist.style.height = '100vh'
        document.getElementById('loadingBar').style.display = 'block'
        playlist.scrollIntoView(true)

        plready = false;
        automate.style.backgroundColor = 'RGB(148,148,148)'
        // await startPlaylist(document.getElementById('longth').value)
        await concretePlaylist()
        await playlistrun();
        embedPLAYLIST(plID)
        plready = true;
        automate.style.backgroundColor = 'RGB(207,0,0)'
    }
}

async function APIcall() {
    if (plready) {
        // if (needPlaylist < 1 && Math.abs(likelist.length - hatelist.length) > 2) { automate.style.background = 'RGB(148,148,148)' }
        // else automate.style.background = 'RGB(207,0,0)'
    }
    await fetch(`https://songtaste.netlify.app/.netlify/functions/app`, {
        method: 'POST',
        'content-type': 'application/json',
        body: JSON.stringify(allSongs)
        // mode: 'no-cors'
    }).then(res => res.json())
        .then(d => {
            apiData = d
            allSongs.transfernet = apiData.transfernet
            allSongs.transfertrainer = apiData.transfertrainer
            console.log(apiData.returnedGuess)
        })
}
async function getToken() {
    await fetch(`https://accounts.spotify.com/api/token`, {
        method: 'POST',
        headers: {
            Authorization: `Basic ${creds}`,
            'content-type': "application/x-www-form-urlencoded"
        },
        body: "grant_type=client_credentials"
    })
        .then(res => res.json())
        .then(data => { key = data['access_token'] })
    // console.log(key)
}
async function searchNew(q) {
    await getToken()
    await fetch(`https://api.spotify.com/v1/search?q=${q}&type=track&limit=1&offset=${Math.floor(Math.random() * 5)}`, {
        method: "GET",
        headers: {
            Accept: "application/json",
            "content-type": "application/json",
            Authorization: `Bearer ${key}`,
        }
    })
        .then(r => r.json())
        .then(data => {
            currentID = data.tracks.items[0].id
            window.sessionStorage.setItem('id', currentID)

        })
}




async function searchLater(q, pl) {
    if (pl) {
        do {
            failed = false;
            await getToken()
            await fetch(`https://api.spotify.com/v1/search?q=${q}&type=track&limit=1&offset=${Math.floor(Math.random() * SLrandomness)}`, {
                method: "GET",
                headers: {
                    Accept: "application/json",
                    "content-type": "application/json",
                    Authorization: `Bearer ${key}`,
                }
            })
                .then(r => r.json())
                .then(data => {
                    currentID = data.tracks.items[0].id


                    if (allSongs.IDList.includes(currentID)) {/* wordLength++; */console.log('duplicate ID'); q = randomWord(wordLength) }
                }).catch(() => {
                    failed = true;
                    q = randomWord(wordLength);
                }
                )
        } while (bestURI.includes('spotify:track:' + currentID) || failed)

    }
    else {
        do {
            failed = false;
            await getToken()
            await fetch(`https://api.spotify.com/v1/search?q=${q}&type=track&limit=1&offset=${Math.floor(Math.random() * SLrandomness)}`, {
                method: "GET",
                headers: {
                    Accept: "application/json",
                    "content-type": "application/json",
                    Authorization: `Bearer ${key}`,
                }
            })
                .then(r => r.json())
                .then(data => {
                    currentID = data.tracks.items[0].id
                    window.sessionStorage.setItem('id', currentID)


                    if (allSongs.IDList.includes(currentID)) { wordLength++; console.log('duplicate ID'); q = randomWord(wordLength) }
                }).catch(() => {
                    failed = true;
                    q = randomWord(wordLength);
                }
                )
        } while (allSongs.IDList.includes(currentID) || failed)
    }
}
async function searchSpecific(q) {
    do {
        await getToken()
        await fetch(`https://api.spotify.com/v1/search?q=${q}&type=track&limit=1`, {
            method: "GET",
            headers: {
                Accept: "application/json",
                "content-type": "application/json",
                Authorization: `Bearer ${key}`,
            }
        })
            .then(r => r.json())
            .then(data => {
                currentID = data.tracks.items[0].id


                if (allSongs.IDList.includes(currentID)) { wordLength++; console.log('duplicate ID'); q = randomWord(wordLength) } else {

                    embed('box-iframe', currentID)
                    retrieveFeatures(currentID)
                    if (needMore < 1) {
                        APIcall()
                        let curArray;
                        const liker = apiData.returnedGuess >= threshold
                        if (liker) curArray = responses.true; else curArray = responses.false
                        if (liker) document.getElementById('guessID').style.backgroundColor = "RGB(0,230,0)"
                        else document.getElementById('guessID').style.backgroundColor = "RGB(230,0,0)"
                        // console.log(liker)
                        do { message = curArray[Math.floor(Math.random() * curArray.length)] } while (message == document.getElementById('guessID').innerHTML)
                        console.log(message)
                        document.getElementById('guessTEXT').innerHTML = message
                    }
                }
            })
    } while (allSongs.IDList.includes(currentID))
}




// for (let i = 0; i < 360; i++) {
//     kfArray.push({
//         name: `${i}`,
//         from: {
//             'transform': `rotate(${i}deg)`
//         },
//         to: {
//             'transform': `rotate(${i + 360}deg)`
//         }
//     })

// }
// console.log(JSON.stringify(kfArray))



async function retrieveSong(q, spot, ind) {
    let research = false
    await getToken()
    do {
        await fetch(`https://api.spotify.com/v1/search?q=${q}&type=track&limit=1`, {//&offset=${Math.floor(Math.random() * 20)}`, {
            method: "GET",
            headers: {
                Accept: "application/json",
                "content-type": "application/json",
                Authorization: `Bearer ${key}`,
            }
        })
            .then(r => r.json())
            .then(data => {
                switch (spot) {
                    case 0: break;
                    case 1: if (homePreview[0] == data.tracks.items[0]) research = true; break;
                    case 2: if (homePreview[0] == data.tracks.items[0] || homePreview[1] == data.tracks.items[0]) research = true; break;
                }
                if (!research) homePreview[spot] = data.tracks.items[0]
            })
    } while (research)
    await fetch(`https://api.spotify.com/v1/tracks/${homePreview[spot].id}`, {
        method: "GET",
        headers: {
            Accept: "application/json",
            "content-type": "application/json",
            Authorization: `Bearer ${key}`,
        }
    })
        .then(r => r.json())
        .then(data => {
            // const lm = document.getElementById('lm')
            homePreview[spot] = data
            console.log(homePreview[spot].album.images[0].url)
            const frame = document.getElementById('song' + ind)
            frame.style.backgroundImage = 'url(' + homePreview[spot].album.images[0].url + ')'
            const label = document.getElementById('info' + ind)
            label.innerHTML = `${homePreview[spot].name}<br>${homePreview[spot].artists[0].name}`
            frame.setAttribute('data-angle', '0deg')
            // frame.setAttribute('data-maxAngle', '10deg')
            spinner[spot] = 0
            var st = window.getComputedStyle(frame, null)

            frame.onmousemove = () => {
                st = window.getComputedStyle(frame, null)

                const tt = st.getPropertyValue('transform')
                const xx = tt.replace('matrix(', '').replace(', 0, 0)', '').split(',')
                const cos = Math.round(Math.acos(xx[0]) * (180 / Math.PI))
                const sin = Math.round(Math.asin(xx[1]) * (180 / Math.PI))
                const iscos = cos > 0
                const issin = sin > 0
                const angle = issin ? cos : 360 - cos

                spinner[spot] = Math.round(angle)
                // frame.setAttribute('data-angle', angle + 'deg')
                // console.log(frame.getAttribute('data-maxAngle'))
                // lm.innerHTML = `angle: ${issin ? cos : 360 - cos}`

                // const sin = tt[1]
                // const angle = Math.round(Math.asin(sin) * (180 / Math.PI))
                // frame.setAttribute('data-maxAngle', ((angle + 359) % 360) + 'deg')
                // console.log('SONG ' + spinner[spot])
            }

            frame.onmouseenter = () => {

                $.keyframe.define({
                    name: `rotation${ind}`,
                    from: {
                        'transform': `rotate(${spinner[spot]}deg)`
                    },
                    to: {
                        'transform': `rotate(${spinner[spot] + 360}deg)`
                    }
                });

                // document.getElementById('song' + ind).style.transform = `rotate(${frame.getAttribute('data-angle')})`
                // frame.style.transform = 'rotate(' + spinner[spot] + 'deg)'
                frame.style.animation = `rotation${ind} 6s linear infinite`


                // console.log(spinner[spot])
                const preview = document.getElementById('audio' + ind)

                if (homePreview[spot].preview_url && !responding) preview.play().catch((e) => { enable(true) })
            }
            frame.onmouseleave = () => {
                // console.log(document.getElementById('song' + ind).style.transform)



                // frame.style.transform = 'rotate(' + spinner[spot] + 'deg)'


                $.keyframe.define({
                    name: `derotation${ind}`,
                    from: {
                        'transform': `rotate(${spinner[spot]}deg)`
                    },
                    to: {
                        'transform': `rotate(0deg)`
                    }
                });
                frame.style.animation = `derotation${ind} ${Math.round(spinner[spot] / 60)}s linear 1`



                // frame.setAttribute('data-maxAngle', 10 + 'deg')
                // document.getElementById('song' + ind).style.transform = `rotate(${spinner[spot]}deg)`



                // console.log(document.getElementById('song' + ind).style.transform)
                // console.log(frame.getAttribute('data-angle'))
            }
            if (homePreview[spot].preview_url && !responding) {
                const preview = document.getElementById('audio' + ind)
                preview.setAttribute('src', homePreview[spot].preview_url)
                frame.onmouseout = () => preview.pause()
                label.innerHTML += '🔊'
            }
            const box = document.getElementById('box' + ind)
            frame.style.transform = 'rotate(0deg)'
            box.onmousemove = () => {
                st = window.getComputedStyle(frame, null)
                const pv = st.getPropertyValue('transform')
                const sp = pv.replace('matrix(', '').replace(', 0, 0)', '').split(',')
                const cosine = Math.round(Math.acos(sp[0]) * (180 / Math.PI))
                const sine = Math.round(Math.asin(sp[1]) * (180 / Math.PI))
                const bcos = cosine > 0
                const bsin = sine > 0
                const ang = bsin ? cosine : 360 - cosine

                spinner[spot] = ang

            }
            box.onclick = () => { location.href = "app?s=" + homePreview[spot].id; window.sessionStorage.setItem('id', homePreview[spot].id) }
        })
}

async function retrieveFeatures(id) {
    await getToken()
    await fetch(`https://api.spotify.com/v1/audio-features/${id}`, {
        method: "GET",
        headers: {
            Accept: "application/json",
            "content-type": "application/json",
            Authorization: `Bearer ${key}`,
        }
    })
        .then(r => r.json())
        .then(data => {
            console.log(data)
            mainBox = data;
            allSongs.Crun = [
                data.acousticness,
                data.danceability,
                data.duration_ms,
                data.energy,
                data.instrumentalness,
                data.liveness,
                data.speechiness,
                data.tempo,
                data.valence
            ]

        })

}

function embed(container, id) {
    document.getElementById(container).innerHTML = `<iframe class="iframe" src="https://open.spotify.com/embed/track/${id}" class="${responding ? 'FR-' : ''}iframe"
frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>`;
    document.body.onresize()

}
function embedPLAYLIST(id) {
    document.getElementById("playlist-view").innerHTML += `<center><iframe class="playlist-iframe" src="https://open.spotify.com/embed/playlist/${id}" class="${responding ? 'FR-' : ''}iframe"
    frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe></center>`;
    document.body.onresize()

}




function responsive(wide, narrow) {
    const w = document.getElementsByClassName(wide)
    const n = document.getElementsByClassName(narrow)
    if (screen.width < 750) {
        responding = true;
        for (e of w) {
            e.classList.remove(wide)
            e.classList.add(narrow)
        }

    } else {
        responding = false;
        for (e of n) {
            e.classList.remove(narrow)
            e.classList.add(add)
        }
    }
}
function randomWord(len) {
    const lows = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm']
    var str = "";
    for (let i = 0; i < len; i++) {
        str += lows[Math.floor(Math.random() * lows.length)]
    }
    return str;
}
function enable(b) {
    const e = document.getElementById('enable')
    if (b) { e.style.top = '40%' }
    else e.style.top = '300%'
}
// acousticness: 0.00321,
//     danceability: 0.451,
//         duration_ms: 226336,
//             energy: 0.661,
//                 instrumentalness: 0,
//                     liveness: 0.108,
//                         speechiness: 0.0976,
//                             tempo: 180.133,
//                                 valence: 0.444

async function reactingList(id, like) {
    await getToken()
    await fetch(`https://api.spotify.com/v1/tracks/${id}`, {
        method: "GET",
        headers: {
            Accept: "application/json",
            "content-type": "application/json",
            Authorization: `Bearer ${key}`,
        }
    })
        .then(r => r.json())
        .then(data => {
            if (like == 1) {
                const nfo = {
                    "name": data.name,
                    "artist": data.artists[0].name,
                    "id": id,
                    "img": data.album.images[0].url
                }
                likelist.push(nfo)
                for (k in targets) {
                    targets[k].push(mainBox[k])
                }
                window.localStorage.setItem('targ', JSON.stringify(targets))
                goodURI.push('spotify:track:' + nfo.id)
                document.getElementById('goodlist').appendChild(returnHTMLfordataview(nfo))
            } else if (like == 0) {
                const nfo = {
                    "name": data.name,
                    "artist": data.artists[0].name,
                    "id": id,
                    "img": data.album.images[0].url
                }
                hatelist.push(nfo)
                document.getElementById('badlist').appendChild(returnHTMLfordataview(nfo))
            }
        })
    document.getElementById('likedh1').innerHTML = `Liked (${likelist.length})`
    document.getElementById('dislikedh1').innerHTML = `Disiked (${hatelist.length})`
}


async function songReact(like) {
    if (reactready) {
        reactready = false
        allSongs.IDList.push(currentID)
        allSongs.Atrain.push({
            "input": [
                mainBox.acousticness,
                mainBox.danceability,
                mainBox.duration_ms,
                mainBox.energy,
                mainBox.instrumentalness,
                mainBox.liveness,
                mainBox.speechiness,
                mainBox.tempo,
                mainBox.valence
            ],
            "output": [
                like
            ]
        })
        await reactingList(currentID, like)
        await searchLater(randomWord(wordLength))
        await retrieveFeatures(currentID)
        automate.innerHTML = "Automate a playlist"
        if (needPlaylist >= 1) {
            needPlaylist--;
            automate.innerHTML = (needPlaylist + 1) + " more..."
        }
        if (needMore >= 1) {
            needMore--;
            document.getElementById('guessTEXT').innerHTML = (needMore + 1) + " more..."
        } else {
            allSongs.Crun = [
                mainBox.acousticness,
                mainBox.danceability,
                mainBox.duration_ms,
                mainBox.energy,
                mainBox.instrumentalness,
                mainBox.liveness,
                mainBox.speechiness,
                mainBox.tempo,
                mainBox.valence
            ]
            await APIcall()
            let curArray;
            const liker = apiData.returnedGuess >= threshold
            if (liker) curArray = responses.true; else curArray = responses.false
            if (liker) document.getElementById('guessID').style.backgroundColor = "RGB(0,230,0)"
            else document.getElementById('guessID').style.backgroundColor = "RGB(230,0,0)"
            // console.log(liker)
            do { message = curArray[Math.floor(Math.random() * curArray.length)] } while (message == document.getElementById('guessTEXT').innerHTML)
            console.log(message)
            document.getElementById('guessTEXT').innerHTML = message
        }

        embed('box-iframe', currentID)
        reactready = true
        // console.log(allSongs)
    }
    // if (needPlaylist < 1 && Math.abs(likelist.length - hatelist.length) > 2) { automate.style.background = 'RGB(148,148,148)' }

    window.localStorage.setItem('all', JSON.stringify(allSongs))

}


function getFile(event) {
    const input = event.target
    if ('files' in input && input.files.length > 0) {
        placeFileContent(
            null,
            input.files[0])
    }
}

async function placeFileContent(target, file) {
    readFileContent(file).then(content => {
        allSongs = JSON.parse(content);
        window.localStorage.setItem('all', JSON.stringify(allSongs))
        updateTEXT()
        for (let i = 0; i < allSongs.IDList.length; i++) {
            reactingList(allSongs.IDList[i], allSongs.Atrain[i].output == 1 ? true : false)
        }
        document.getElementById('likedh1').innerHTML = `Liked (${likelist.length})`
        document.getElementById('dislikedh1').innerHTML = `Disiked (${hatelist.length})`
        toggleDataview()
        console.log(allSongs)
    }).catch(error => console.log(error))
}

async function readFileContent(file) {
    const reader = new FileReader()
    return new Promise((resolve, reject) => {
        reader.onload = event => resolve(event.target.result)
        reader.onerror = error => reject(error)
        reader.readAsText(file)
    })
}
function download(filename, text) {
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}

//remove from likelist, IDList (index), Atrain (index)
function removeFromView(id) {
    document.getElementById(id).parentNode.removeChild(document.getElementById(id))
    const u = likelist.indexOf(id)
    for (k in targets) {
        targets[k].slice(0, u).concat(targets[k].slice(u + 1, targets[k].length))
    }
    likelist = likelist.filter(e => e.id != id)
    hatelist = hatelist.filter(e => e.id != id)
    document.getElementById('likedh1').innerHTML = `Liked (${likelist.length})`
    document.getElementById('dislikedh1').innerHTML = `Disiked (${hatelist.length})`
    const i = allSongs.IDList.indexOf(id)
    allSongs.IDList = allSongs.IDList.slice(0, i).concat(allSongs.IDList.slice(i + 1, allSongs.IDList.length))
    allSongs.Atrain = allSongs.Atrain.slice(0, i).concat(allSongs.Atrain.slice(i + 1, allSongs.Atrain.length))
    updateTEXT()
    window.localStorage.setItem('all', JSON.stringify(allSongs))
}


function returnHTMLfordataview(obj) {
    const aa = document.createElement('div')
    aa.setAttribute('style', 'display: flex; flex-direction:row;')
    aa.setAttribute('class', 'tap')

    const di = document.createElement('div')
    di.setAttribute('class', 'dataitem tap')
    di.setAttribute('id', obj.id)

    const dp = document.createElement('div')
    dp.setAttribute('class', 'datapicture')
    dp.setAttribute('style', 'background-image:url(' + obj.img + ')')
    dp.onclick = () => window.open(`https://open.spotify.com/track/${obj.id}`, '_blank').focus()

    const dt = document.createElement('div')
    dt.setAttribute('class', 'datatext')
    dt.onclick = () => window.open(`https://open.spotify.com/track/${obj.id}`, '_blank').focus()

    const t = document.createElement('div')
    t.setAttribute('class', 'top')
    t.innerHTML = obj.name

    const b = document.createElement('div')
    b.setAttribute('class', 'bottom')
    b.innerHTML = obj.artist


    const x = document.createElement('div')
    x.setAttribute('class', 'tap datax')
    const ff = document.createElement('div')
    ff.setAttribute('class', 'centrevert tap')
    ff.appendChild(x)
    ff.onclick = () => removeFromView(obj.id)

    dt.appendChild(t)
    dt.appendChild(b)

    aa.appendChild(dp)
    aa.appendChild(dt)
    di.appendChild(aa)
    di.appendChild(ff)

    return di

}

function toggleDataview() {
    switch (v.getAttribute('style')) {
        case 'top: 50px': v.setAttribute('style', 'top: 3000px'); break;
        default: console.log('defaulted')
        case 'top: 3000px': v.setAttribute('style', 'top: 50px'); break;
    }
    document.getElementById('likedh1').innerHTML = `Liked (${likelist.length})`
    document.getElementById('dislikedh1').innerHTML = `Disiked (${hatelist.length})`

}

async function startPlaylist(len) {
    let counter = 0;
    listplay = []
    loadingPL = true;
    document.getElementById('loadingBar').style.display = 'block';
    while (listplay.length < len) {
        if (counter >= 10 && listplay.length == 0) {
            for (let i = 0; i < len; i++) {
                listplay.push(null)
            }
            alert('Insufficient Data for Playlist Automation')
        }
        barLength = (listplay.length / len) * 100
        console.log(barLength)
        document.getElementById('barbar').style.width = String(barLength) + '%'
        await getToken()
        await searchLater(randomWord(wordLength + 1), true)
        await retrieveFeatures(currentID)
        allSongs.Crun = [
            mainBox.acousticness,
            mainBox.danceability,
            mainBox.duration_ms,
            mainBox.energy,
            mainBox.instrumentalness,
            mainBox.liveness,
            mainBox.speechiness,
            mainBox.tempo,
            mainBox.valence
        ]
        await APIcall()
        console.log(apiData)
        if (apiData.returnedGuess >= threshold) { listplay.push('spotify:track:' + currentID) } else console.log('didnt like ' + currentID)
        counter++
    }
    loadingPL = false;
    document.getElementById('loadingBar').style.display = 'none';
    bestURI = listplay
}

async function concretePlaylist() {
    let trax = await recommend()
    bestURI = []
    trax.tracks.forEach(e => bestURI.push(e.uri))

}



async function playlistrun() {
    if (err) {
        code = new URLSearchParams(window.location.search).get('code')
        tokenObj = await token()
        console.log(tokenObj)
        userObj = await user()
        console.log(userObj)
        await refresh()
        await checkIfMade()
        if (!alreadyMadePlaylist) { await createPlaylist(playlistJSON) }
        await refresh()
        console.log(tokenObj)
        await replace(bestURI, plID)
    }
}



async function token() {
    return await fetch("https://accounts.spotify.com/api/token", {
        method: "POST",
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${creds}`
        },
        body: `grant_type=authorization_code&code=${code}&redirect_uri=${encodeURIComponent(redirect)}`
    }).then(res => res.json())

}

async function user() {
    return await fetch(`https://api.spotify.com/v1/me`, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${tokenObj.access_token}`
        }
    }).then(res => res.json())
}

// async function checkPlaylists() {
//     await fetch(`https://api.spotify.com/v1/users/${userObj.id}/playlists?limit=50`, {
//         method: "GET",
//         headers: {
//             'Authorization': `Bearer ${tokenObj.access_token}`
//         },
//         body: JSON.stringify(bodyJSON)
//     }).then(res => res.json()).then(data => { plObj = data; console.log(data) })
// }


async function checkIfMade() {
    await fetch(`https://api.spotify.com/v1/users/${userObj.id}/playlists`, {
        method: "GET",
        headers: {
            // 'Content-Type': 'application/JSON',
            'Authorization': `Bearer ${tokenObj.access_token}`
        },
    }).then(res => res.json()).then(data => {
        console.log(data.items);
        for (let i = 0; i < data.items.length; i++) {
            console.log(data.items[i])
            if (data.items[i].name == "SongTaste Favorites") {
                alreadyMadePlaylist = true;
                plID = data.items[i].id
                console.log("found one: " + plID)
            } else console.log("NOTHING")
        }

    })
}

async function createPlaylist(bodyJSON) {
    //create
    alreadyMadePlaylist = true;
    await fetch(`https://api.spotify.com/v1/users/${userObj.id}/playlists`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/JSON',
            'Authorization': `Bearer ${tokenObj.access_token}`
        },
        body: JSON.stringify(bodyJSON)
    }).then(res => res.json()).then(data => { plObj = data; console.log(data); plID = plObj.id })
    //image
    await fetch(`https://api.spotify.com/v1/playlists/${plID}/images`, {
        method: "PUT",
        headers: {
            'Content-Type': 'image/jpeg',
            'Authorization': `Bearer ${tokenObj.access_token}`
        },
        body: imgData.data
    })
}

async function refresh() {
    return await fetch("https://accounts.spotify.com/api/token", {
        method: "POST",
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${creds}`
        },
        body: `grant_type=refresh_token&refresh_token=${tokenObj.refresh_token}`
    }).then(res => res.json()).then(data => tokenObj.access_token = data.access_token)
}


async function replace(songlist, id) {
    await fetch(`https://api.spotify.com/v1/playlists/${id}/tracks?uris=${songlist.join(',')}`, {
        method: "PUT",
        headers: {
            "Authorization": 'Bearer ' + tokenObj.access_token,
            "Content-Type": "application/JSON"
        }
    }).then(res => { console.log(res); res.json() }).then(data => console.log(data)).catch(e => console.log('errorrrr  ' + e))
}

async function recommend() {
    await getToken()
    let average = (array) => {
        let sum = 0
        for (a of array) {
            // if(a!=null&&a!=''&&a!=undefined&&a!='null'&&a!='undefined'){}
            if (a) sum += a
        }
        return Math.round((sum / array.length) * 100) / 100
    }
    let atarg = []
    for (k in targets) {
        if (k == 'duration_ms') {
            atarg.push(`&target_${k}=${Math.round(average(targets[k]))}`)
        } else
            atarg.push(`&target_${k}=${average(targets[k])}`)
    }
    let rans = []
    let curry
    for (let i = 0; i < 5; i++) {
        do {
            curry = Math.floor(Math.random() * likelist.length)
        } while (rans.includes(curry))
        rans.push(curry)
    }
    let seedTracks = []
    for (i of rans) { seedTracks.push(likelist[i].id) }

    return await fetch(
        `https://api.spotify.com/v1/recommendations?seed_tracks=${seedTracks[0]},${seedTracks[1]},${seedTracks[2]},${seedTracks[3]},${seedTracks[4]}${atarg.join('')}&limit=${document.getElementById('longth').value}`




        , {
            headers: {
                Authorization: `Bearer ${key}`
            }
        }).then(res => res.json())
}




// async function ammend() {
//     await fetch(`https://api.spotify.com/v1/playlists/${plObj.id}/tracks?uris=${goodURI.join(',')}`, {
//         method: "POST",
//         "Authorization": 'Bearer ' + tokenObj.access_token,
//         "Content-Type": "application/JSON"
//     }).then(res => { console.log(res); res.json() }).then(data => console.log(data)).catch(e => console.log('errorrrr  ' + e))
// }





